# initial incidence conditions
if ( N_geo>1 ){
mu0 <- colMeans(incidence[,-1])*SI$SItrunc
}else{
mu0 <- mean(incidence[,-1])*SI$SItrunc
}
# initially, we assume R=1 and choose initial condition accordingly, i.e. with mu0 case and R=1
# we expect the number of daily cases to stabilised at the mean of the observed incidence in the
# time window of interest
# this is use for the prior of initial number of cases, i.e. as the mean of an exponential distribution
# in practice, the mu0 cases will happen 100 days before the start of the time windows
theta0 <- c(rep(1,N_geo), mu0)          # initial parameter R=1 (time # of locations, and initial number of cases in the past)
res <- MCMC_full(I = incidence,
N_geo = N_geo,
iter = rep,
theta0 = theta0,
s = sigma_prop,
SI = SI,
mu0 = mu0,
repli_adapt = 10,
within_iter = rep/10)
Acc <- colSums(diff(res$theta)!=0)/rep          # acceptance rate (should be close to .2)
Acc
# plot traces
plot(res$logL[,1])                                  # of likelihood
layout(matrix(1:N_geo,2,ceiling(N_geo/2),byrow = TRUE))
for (i in 1:N_geo) plot(res$theta[,i])              # of R's
for (i in 1:N_geo) plot(res$theta[,N_geo+i])        # of initial conditions
if (N_geo>1){
R_est <- apply(res$theta[,1:N_geo],2,
quantile,c(.5,.025,.975))   # median and 95%CrI of Rs by locations
I0_est <- apply(res$theta[,(N_geo+1):(2*N_geo)],2,
quantile,c(.5,.025,.975))   # median and 95%CrI of I0
}else{
R_est <- quantile(res$theta[,1],c(.5,.025,.975))
I0_est <- quantile(res$theta[,2],c(.5,.025,.975))
}
save.image('test_on_simulation1.RData')             # saving so far
layout(matrix(1:2,1,2,byrow = TRUE))
errbar(1:N_geo,R_est[1,],R_est[2,],R_est[3,],
xlab = 'location', ylab = 'R',ylim = c(0,3), bty = 'n')
lines(c(1,N_geo),rep(R,2), col = 'red')
# forward projection
I_pred <- Proj_Pois(Results = res ,
NR_samples = 10,
Nsim_per_samples = 2,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
# function to project forward, see Rscript/useful_functions.R
# needs the parameters estimated (Results)
# number of simulations
# week_forward: number of week projected from the START of the time window, SO: includes the period of time
# for which we have data!!! e.g. if we have 2 weeks of data and want to project for the 4 weeks
# after that, week_forward should be 6.
# require number of locations + serial interval
temp <- as.matrix(t(I_pred[,1,101:156]))
I2 <- build_projections(t(temp), dates = NULL, cumulative = FALSE)
# plot the observed incidence in the time window of interest and the median and 95%CrI predictions
layout(matrix(1:N_geo,2,ceiling(N_geo/2),byrow = TRUE))
for(i in 1:N_geo){
CI_pred <- apply(I_pred[,i,101:dim(I_pred)[3]],2,quantile,c(.5,.025,.975))
plot(1:nrow(incidence),incidence[,1+i],
xlim=c(0,ncol(CI_pred)),
ylim = c(0,1+max(c(incidence[,1+i],as.vector(CI_pred)))),
xlab = 'time', ylab = 'incidence')
x <- 1:ncol(CI_pred)
lines(x,CI_pred[1,],col='blue',lwd=2)
polygon(c(x,rev(x)), c(CI_pred[2,],rev(CI_pred[3,])),
col = rgb(0,0,1,.2), border = FALSE )
}
sum(I_pred == pre$I_pred)
load('prechange.Rdata')
sum(I_pred == pre$I_pred)
prod(dim(I_pred))
sum(I_pred == pre$I_pred)
prod(dim(I_pred)) == sum(I_pred == pre$I_pred)
library(incidence)
library(projections)
library(epitrix)
library(EpiEstim)
library(Hmisc)
library(ebolaproj)
rm(list = as.vector(ls()))
# devtools::load_all('.')
library(ebolaproj)
# load sample data to check
load(file = 'simulated.RData')
dim(incidence)
set.seed(1)
# number of locations
N_geo <- ncol(incidence)-1
# Serial interval
mean_SI <- 14.2
CV_SI <- 9.6/14.2 # from http://www.nejm.org/doi/suppl/10.1056/NEJMc1414992/suppl_file/nejmc1414992_
SI <- SI_gamma_dist_EpiEstim(mu = mean_SI,
cv = CV_SI,
SItrunc = 40)
# final number of MCMC iterations (the whole thing,
# here with 10 locations runs in ~3.5mins) )
rep <- 2e2
sigma_prop <- rep(0.1,N_geo*2)         # initial proposal variances (they are now tuned!)
# initial incidence conditions
if ( N_geo>1 ){
mu0 <- colMeans(incidence[,-1])*SI$SItrunc
}else{
mu0 <- mean(incidence[,-1])*SI$SItrunc
}
# initially, we assume R=1 and choose initial condition accordingly, i.e. with mu0 case and R=1
# we expect the number of daily cases to stabilised at the mean of the observed incidence in the
# time window of interest
# this is use for the prior of initial number of cases, i.e. as the mean of an exponential distribution
# in practice, the mu0 cases will happen 100 days before the start of the time windows
theta0 <- c(rep(1,N_geo), mu0)          # initial parameter R=1 (time # of locations, and initial number of cases in the past)
res <- MCMC_full(I = incidence,
N_geo = N_geo,
iter = rep,
theta0 = theta0,
s = sigma_prop,
SI = SI,
mu0 = mu0,
repli_adapt = 10,
within_iter = rep/10)
Acc <- colSums(diff(res$theta)!=0)/rep          # acceptance rate (should be close to .2)
Acc
# plot traces
plot(res$logL[,1])                                  # of likelihood
layout(matrix(1:N_geo,2,ceiling(N_geo/2),byrow = TRUE))
for (i in 1:N_geo) plot(res$theta[,i])              # of R's
for (i in 1:N_geo) plot(res$theta[,N_geo+i])        # of initial conditions
if (N_geo>1){
R_est <- apply(res$theta[,1:N_geo],2,
quantile,c(.5,.025,.975))   # median and 95%CrI of Rs by locations
I0_est <- apply(res$theta[,(N_geo+1):(2*N_geo)],2,
quantile,c(.5,.025,.975))   # median and 95%CrI of I0
}else{
R_est <- quantile(res$theta[,1],c(.5,.025,.975))
I0_est <- quantile(res$theta[,2],c(.5,.025,.975))
}
save.image('test_on_simulation1.RData')             # saving so far
layout(matrix(1:2,1,2,byrow = TRUE))
errbar(1:N_geo,R_est[1,],R_est[2,],R_est[3,],
xlab = 'location', ylab = 'R',ylim = c(0,3), bty = 'n')
lines(c(1,N_geo),rep(R,2), col = 'red')
# forward projection
start_time <- Sys.time()
I_pred <- Proj_Pois(Results = res ,
NR_samples = 10,
Nsim_per_samples = 2,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
end_time <- Sys.time()
end_time - start_time
# function to project forward, see Rscript/useful_functions.R
# needs the parameters estimated (Results)
# number of simulations
# week_forward: number of week projected from the START of the time window, SO: includes the period of time
# for which we have data!!! e.g. if we have 2 weeks of data and want to project for the 4 weeks
# after that, week_forward should be 6.
# require number of locations + serial interval
temp <- as.matrix(t(I_pred[,1,101:156]))
I2 <- build_projections(t(temp), dates = NULL, cumulative = FALSE)
# forward projection
start_time <- Sys.time()
I_pred <- Proj_Pois(Results = res ,
NR_samples = 100,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
end_time <- Sys.time()
end_time - start_time
# function to project forward, see Rscript/useful_functions.R
# needs the parameters estimated (Results)
# number of simulations
# week_forward: number of week projected from the START of the time window, SO: includes the period of time
# for which we have data!!! e.g. if we have 2 weeks of data and want to project for the 4 weeks
# after that, week_forward should be 6.
# require number of locations + serial interval
temp <- as.matrix(t(I_pred[,1,101:156]))
I2 <- build_projections(t(temp), dates = NULL, cumulative = FALSE)
# forward projection
start_time <- Sys.time()
I_pred <- Proj_Pois2(Results = res ,
NR_samples = 100,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
end_time <- Sys.time()
end_time - start_time
# function to project forward, see Rscript/useful_functions.R
# needs the parameters estimated (Results)
# number of simulations
# week_forward: number of week projected from the START of the time window, SO: includes the period of time
# for which we have data!!! e.g. if we have 2 weeks of data and want to project for the 4 weeks
# after that, week_forward should be 6.
# require number of locations + serial interval
temp <- as.matrix(t(I_pred[,1,101:156]))
I2 <- build_projections(t(temp), dates = NULL, cumulative = FALSE)
# forward projection
start_time <- Sys.time()
I_pred <- Proj_NegBin(Results = res ,
NR_samples = 100,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
# forward projection
start_time <- Sys.time()
I_pred <- Proj_NegBin(Results = res ,Overdispersion = 0.02,
NR_samples = 100,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
end_time <- Sys.time()
end_time - start_time
# function to project forward, see Rscript/useful_functions.R
# needs the parameters estimated (Results)
# number of simulations
# week_forward: number of week projected from the START of the time window, SO: includes the period of time
# for which we have data!!! e.g. if we have 2 weeks of data and want to project for the 4 weeks
# after that, week_forward should be 6.
# require number of locations + serial interval
temp <- as.matrix(t(I_pred[,1,101:156]))
I2 <- build_projections(t(temp), dates = NULL, cumulative = FALSE)
# forward projection
start_time <- Sys.time()
I_pred <- Proj_NegBin(Results = res ,Overdispersion = 0.02,
NR_samples = 100,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
end_time <- Sys.time()
end_time - start_time
# function to project forward, see Rscript/useful_functions.R
# needs the parameters estimated (Results)
# number of simulations
# week_forward: number of week projected from the START of the time window, SO: includes the period of time
# for which we have data!!! e.g. if we have 2 weeks of data and want to project for the 4 weeks
# after that, week_forward should be 6.
# require number of locations + serial interval
temp <- as.matrix(t(I_pred[,1,101:156]))
I2 <- build_projections(t(temp), dates = NULL, cumulative = FALSE)
# forward projection
start_time <- Sys.time()
I_pred <- Proj_NegBin(Results = res ,Overdispersion = 0.02,
NR_samples = 100,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
end_time <- Sys.time()
end_time - start_time
# function to project forward, see Rscript/useful_functions.R
# needs the parameters estimated (Results)
# number of simulations
# week_forward: number of week projected from the START of the time window, SO: includes the period of time
# for which we have data!!! e.g. if we have 2 weeks of data and want to project for the 4 weeks
# after that, week_forward should be 6.
# require number of locations + serial interval
temp <- as.matrix(t(I_pred[,1,101:156]))
I2 <- build_projections(t(temp), dates = NULL, cumulative = FALSE)
# forward projection
start_time <- Sys.time()
I_pred <- Proj_NegBin2(Results = res ,Overdispersion = 0.02,
NR_samples = 100,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
library(incidence)
library(projections)
library(epitrix)
library(EpiEstim)
library(Hmisc)
library(ebolaproj)
rm(list = as.vector(ls()))
# devtools::load_all('.')
library(ebolaproj)
# load sample data to check
load(file = 'simulated.RData')
dim(incidence)
set.seed(1)
# number of locations
N_geo <- ncol(incidence)-1
# Serial interval
mean_SI <- 14.2
CV_SI <- 9.6/14.2 # from http://www.nejm.org/doi/suppl/10.1056/NEJMc1414992/suppl_file/nejmc1414992_
SI <- SI_gamma_dist_EpiEstim(mu = mean_SI,
cv = CV_SI,
SItrunc = 40)
# final number of MCMC iterations (the whole thing,
# here with 10 locations runs in ~3.5mins) )
rep <- 2e2
sigma_prop <- rep(0.1,N_geo*2)         # initial proposal variances (they are now tuned!)
# initial incidence conditions
if ( N_geo>1 ){
mu0 <- colMeans(incidence[,-1])*SI$SItrunc
}else{
mu0 <- mean(incidence[,-1])*SI$SItrunc
}
# initially, we assume R=1 and choose initial condition accordingly, i.e. with mu0 case and R=1
# we expect the number of daily cases to stabilised at the mean of the observed incidence in the
# time window of interest
# this is use for the prior of initial number of cases, i.e. as the mean of an exponential distribution
# in practice, the mu0 cases will happen 100 days before the start of the time windows
theta0 <- c(rep(1,N_geo), mu0)          # initial parameter R=1 (time # of locations, and initial number of cases in the past)
res <- MCMC_full(I = incidence,
N_geo = N_geo,
iter = rep,
theta0 = theta0,
s = sigma_prop,
SI = SI,
mu0 = mu0,
repli_adapt = 10,
within_iter = rep/10)
Acc <- colSums(diff(res$theta)!=0)/rep          # acceptance rate (should be close to .2)
Acc
# plot traces
plot(res$logL[,1])                                  # of likelihood
layout(matrix(1:N_geo,2,ceiling(N_geo/2),byrow = TRUE))
for (i in 1:N_geo) plot(res$theta[,i])              # of R's
for (i in 1:N_geo) plot(res$theta[,N_geo+i])        # of initial conditions
if (N_geo>1){
R_est <- apply(res$theta[,1:N_geo],2,
quantile,c(.5,.025,.975))   # median and 95%CrI of Rs by locations
I0_est <- apply(res$theta[,(N_geo+1):(2*N_geo)],2,
quantile,c(.5,.025,.975))   # median and 95%CrI of I0
}else{
R_est <- quantile(res$theta[,1],c(.5,.025,.975))
I0_est <- quantile(res$theta[,2],c(.5,.025,.975))
}
save.image('test_on_simulation1.RData')             # saving so far
layout(matrix(1:2,1,2,byrow = TRUE))
errbar(1:N_geo,R_est[1,],R_est[2,],R_est[3,],
xlab = 'location', ylab = 'R',ylim = c(0,3), bty = 'n')
lines(c(1,N_geo),rep(R,2), col = 'red')
# forward projection
start_time <- Sys.time()
I_pred <- Proj_Pois(Results = res ,
NR_samples = 100,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
end_time <- Sys.time()
end_time - start_time
# function to project forward, see Rscript/useful_functions.R
# needs the parameters estimated (Results)
# number of simulations
# week_forward: number of week projected from the START of the time window, SO: includes the period of time
# for which we have data!!! e.g. if we have 2 weeks of data and want to project for the 4 weeks
# after that, week_forward should be 6.
# require number of locations + serial interval
temp <- as.matrix(t(I_pred[,1,101:156]))
I2 <- build_projections(t(temp), dates = NULL, cumulative = FALSE)
# forward projection
start_time <- Sys.time()
I_pred <- Proj_Pois2(Results = res ,
NR_samples = 100,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
end_time <- Sys.time()
end_time - start_time
# function to project forward, see Rscript/useful_functions.R
# needs the parameters estimated (Results)
# number of simulations
# week_forward: number of week projected from the START of the time window, SO: includes the period of time
# for which we have data!!! e.g. if we have 2 weeks of data and want to project for the 4 weeks
# after that, week_forward should be 6.
# require number of locations + serial interval
temp <- as.matrix(t(I_pred[,1,101:156]))
I2 <- build_projections(t(temp), dates = NULL, cumulative = FALSE)
# forward projection
start_time <- Sys.time()
I_pred <- Proj_NegBin(Results = res ,Overdispersion = 0.02,
NR_samples = 100,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
end_time <- Sys.time()
end_time - start_time
# function to project forward, see Rscript/useful_functions.R
# needs the parameters estimated (Results)
# number of simulations
# week_forward: number of week projected from the START of the time window, SO: includes the period of time
# for which we have data!!! e.g. if we have 2 weeks of data and want to project for the 4 weeks
# after that, week_forward should be 6.
# require number of locations + serial interval
temp <- as.matrix(t(I_pred[,1,101:156]))
I2 <- build_projections(t(temp), dates = NULL, cumulative = FALSE)
# forward projection
start_time <- Sys.time()
I_pred <- Proj_NegBin2(Results = res ,Overdispersion = 0.02,
NR_samples = 100,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
end_time <- Sys.time()
end_time - start_time
# function to project forward, see Rscript/useful_functions.R
# needs the parameters estimated (Results)
# number of simulations
# week_forward: number of week projected from the START of the time window, SO: includes the period of time
# for which we have data!!! e.g. if we have 2 weeks of data and want to project for the 4 weeks
# after that, week_forward should be 6.
# require number of locations + serial interval
temp <- as.matrix(t(I_pred[,1,101:156]))
I2 <- build_projections(t(temp), dates = NULL, cumulative = FALSE)
# forward projection
start_time <- Sys.time()
I_pred <- Proj_Pois(Results = res ,
NR_samples = 100,
Nsim_per_samples = 100,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
end_time <- Sys.time()
end_time - start_time
# function to project forward, see Rscript/useful_functions.R
# needs the parameters estimated (Results)
# number of simulations
# week_forward: number of week projected from the START of the time window, SO: includes the period of time
# for which we have data!!! e.g. if we have 2 weeks of data and want to project for the 4 weeks
# after that, week_forward should be 6.
# require number of locations + serial interval
temp <- as.matrix(t(I_pred[,1,101:156]))
I2 <- build_projections(t(temp), dates = NULL, cumulative = FALSE)
# forward projection
start_time <- Sys.time()
I_pred <- Proj_Pois2(Results = res ,
NR_samples = 100,
Nsim_per_samples = 100,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
end_time <- Sys.time()
end_time - start_time
# function to project forward, see Rscript/useful_functions.R
# needs the parameters estimated (Results)
# number of simulations
# week_forward: number of week projected from the START of the time window, SO: includes the period of time
# for which we have data!!! e.g. if we have 2 weeks of data and want to project for the 4 weeks
# after that, week_forward should be 6.
# require number of locations + serial interval
temp <- as.matrix(t(I_pred[,1,101:156]))
I2 <- build_projections(t(temp), dates = NULL, cumulative = FALSE)
# forward projection
start_time <- Sys.time()
I_pred <- Proj_NegBin(Results = res ,Overdispersion = 0.02,
NR_samples = 100,
Nsim_per_samples = 100,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
end_time <- Sys.time()
end_time - start_time
# function to project forward, see Rscript/useful_functions.R
# needs the parameters estimated (Results)
# number of simulations
# week_forward: number of week projected from the START of the time window, SO: includes the period of time
# for which we have data!!! e.g. if we have 2 weeks of data and want to project for the 4 weeks
# after that, week_forward should be 6.
# require number of locations + serial interval
temp <- as.matrix(t(I_pred[,1,101:156]))
I2 <- build_projections(t(temp), dates = NULL, cumulative = FALSE)
# forward projection
start_time <- Sys.time()
I_pred <- Proj_NegBin2(Results = res ,Overdispersion = 0.02,
NR_samples = 100,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
end_time <- Sys.time()
end_time - start_time
# function to project forward, see Rscript/useful_functions.R
# needs the parameters estimated (Results)
# number of simulations
# week_forward: number of week projected from the START of the time window, SO: includes the period of time
# for which we have data!!! e.g. if we have 2 weeks of data and want to project for the 4 weeks
# after that, week_forward should be 6.
# require number of locations + serial interval
temp <- as.matrix(t(I_pred[,1,101:156]))
I2 <- build_projections(t(temp), dates = NULL, cumulative = FALSE)
# forward projection
start_time <- Sys.time()
I_pred <- Proj_NegBin2(Results = res ,Overdispersion = 0.02,
NR_samples = 100,
Nsim_per_samples = 100,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
end_time <- Sys.time()
end_time - start_time
# function to project forward, see Rscript/useful_functions.R
# needs the parameters estimated (Results)
# number of simulations
# week_forward: number of week projected from the START of the time window, SO: includes the period of time
# for which we have data!!! e.g. if we have 2 weeks of data and want to project for the 4 weeks
# after that, week_forward should be 6.
# require number of locations + serial interval
temp <- as.matrix(t(I_pred[,1,101:156]))
I2 <- build_projections(t(temp), dates = NULL, cumulative = FALSE)
