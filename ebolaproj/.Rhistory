250*7
5*12
36*.6
55000+40000
95000/12
5000*.3
5500*.3
5500*.3-1300
70000*0.005
70000*0.005
70000*.02
70000*.001
3000*.35
3000*.35-650
3000+2400
5400*.3
5400*.3-1300
5400*.35
5400*.35-1300
360*c(1.2,-.8)
360*c(1.2,.8)
8000/350
50*8
50*8*7
1e4/60
1e4/60/24
40*20
40*50
140*.6
140*.8
5100*.3
5100*.3-1400
140*6
140*.6
90/.8
90/.6
110*.2
140*.2
140*.8
140*.6
140-100
40/140
140*.15
140*.18
140*.18+40
4*500
6*500
6*500/12
120000*.01
395/360
360/395
340/395
60/95
60000*.04
60000*.04*20
2/5
1-1/.7
1.96^2*.5*(1-.5)/.05^2
1.96^2*.5*(1-.5)/.01^2
1.96^2*.5*(1-.5)/.1^2
sqrt(1.96^2*.5*(1-.5)/150)
7*.05
35*.05
140-126
14000*1.5
14000*3
14000/.1*.6
14000/.1*.06
14000/.1*.06*3
14000/.1*.06*3/28685.50
14000/.1*.06*3/28685.50 *1/(14000/.1*.06*3/28685.50 )
14000/.1*.06*3 *1/(14000/.1*.06*3/28685.50 )
14000/.1*.04*3 *1/(14000/.1*.06*3/28685.50 )
14000/.1*.04
14000/.1*.04*3
1.2+1.44+1.2+1.5+.3+.75
1.2+1.44+1.2+1.5+.3+.75+.5
2/.7
1.8/0.1
(126-140)/0.1*.15
(126-140)/0.1*.15*3.5
(126-140)/0.1
(126-140)/0.1*.2
140-28
140-(-126+140)/0.1*.2
112*3
4*800+4*500 + 4*5*60+ 4*300
2*500 +300 + 700 + 2* 400 + 2*4*60 + 4*300
73.5+336
7.6+4+9+1.5+4.48
7.6+4+9+1.5+4.48+409.500
336*2
+73.5
+73.5+672
7*800 +7*500  + 7*5*60  + 7*300
2*2*500 +2*300  + 2*700  +2* 2* 400  + 2*2*4*60  + 2*4*300
8960+13300+8000+15000+3000
745.5+48.26
21/.15*.1
14*6
14*3.5*2
112*3
4*800+4*500+4*5*6-+4*300
4*800+4*500+4*5*60+4*300
2*500+300+800+2*400+2*4*60+2*300
8+9+7.6++1.5+3.98
4+9+7.6++1.5+3.98
336+98
336+98+26.08
2*3.5*14
6*112
7.6*2
3.98*2
4*500+2*300+2*800+4*400+4*4*60+4*300
8*800+8*500+8*5*60+8*300
98+672
15.2+8+18+3+7.96
98+672
98+672+52.16
50*10*30
50*10*3
52.16+1.5
52.16+1.5+770
5*3*50
460.06+.75
26.08+.75
2476.60*12
3180.98*12
79.8/133
4745.83*12
803/6
89181*.990415
322.22+2*232.50/12
25*280.63
79.8/130
79.8/140
25*12
122175.92/300
ilinet(region = c("national"))
install.packages("cdcfluview")
library(cdcfluview)
d=ilinet(region = c("national"))
install.packages("sf")
library(cdcfluview)
library(sf)
install.packages("sf")
library(sf)
library(cdcfluview)
d=ilinet(region = c("national"))
View(d)
d=ilinet(region = c("state"))
133*.15
232.5/12
133*1.15
133*1.15-79800
133*1.15-798
153.423/79.8
1(153.423/79.8)
1/(153.423/79.8)
79.8+73.623
.95^3
.9^(1/3)
.95^(1/3)
79800+56.60-23823.54
120000-(79800+56.60-23823.54)
123000-(79800+56.60-23823.54)
123000-(79800+56.60-23823.54)-5000
75000-(5000+10000)
21715.14+1197+200+372.23+260.52
21715.14+1197+200+372.23+260.52+133000
133000*.03
(133000*.25)*.02
(133000*.02)*.25
(133000*.02)*.25*25
232.50/12
123000*.004
133000*.02*.19
505.4*25
3990/25
31/600
2+14+11+12+8+12+13+8+7+12+12+11+4+12+11+11
(2+14+11+12+8+12+13+8+7+12+12+11+4+12+11+11)212
(2+14+11+12+8+12+13+8+7+12+12+11+4+12+11+11)/212*100
(7+16+4+7+24+17+10+9+14+8+4+10+12.5)/212*100
(7+10+12+7+6+6+8+17+6+6+13+4.5+16+5+5+5+6+5+10+7+2)/212*100
(8+8+10+5+12+12+11+7+6+13+9+13+16.5+11+11.5+1)/212*100
(8+9+13+4+17+7+10+7+8+13+11+11+18.5+14+14+2.5)/212*100
(9+7+11+5+13+8+24+8+15+5+6+8+9+6+10+9+6.5+8)/212*100
(10+28+17+28+20+24+18+12+15)/212*100
(5+14+6+4+12+30+10+14)/212*100
(19+16+6+12+15+8+12+13+6+16+14+13+2)/212*100
(.5+2+2+5.5+9+3+1+5+13)/212*100
(2+14+13+17.5+6+11+11+8+4+13+7+13+3+7+5.5+6.5)/212*100
(12+10+13+8+18+10+19+4+8+10+11+5+16+13+1.5)/212*100
(12+10+13+8+18+10+19+4+8+10+11+5+15+16+13+1.5)/212*100
getwd()
setwd('GitHub/ebolaproj/')
library(incidence)
library(projections)
library(epitrix)
library(EpiEstim)
library(Hmisc)
library(ebolaproj)
rm(list = as.vector(ls()))
# devtools::load_all('.')
library(ebolaproj)
# load sample data to check
load(file = 'simulated.RData')
dim(incidence)
set.seed(1)
# number of locations
N_geo <- ncol(incidence)-1
# Serial interval
mean_SI <- 14.2
CV_SI <- 9.6/14.2 # from http://www.nejm.org/doi/suppl/10.1056/NEJMc1414992/suppl_file/nejmc1414992_
SI <- SI_gamma_dist_EpiEstim(mu = mean_SI,
cv = CV_SI,
SItrunc = 40)
# final number of MCMC iterations (the whole thing,
# here with 10 locations runs in ~3.5mins) )
rep <- 2e2
sigma_prop <- rep(0.1,N_geo*2)         # initial proposal variances (they are now tuned!)
# initial incidence conditions
if ( N_geo>1 ){
mu0 <- colMeans(incidence[,-1])*SI$SItrunc
}else{
mu0 <- mean(incidence[,-1])*SI$SItrunc
}
# initially, we assume R=1 and choose initial condition accordingly, i.e. with mu0 case and R=1
# we expect the number of daily cases to stabilised at the mean of the observed incidence in the
# time window of interest
# this is use for the prior of initial number of cases, i.e. as the mean of an exponential distribution
# in practice, the mu0 cases will happen 100 days before the start of the time windows
theta0 <- c(rep(1,N_geo), mu0)          # initial parameter R=1 (time # of locations, and initial number of cases in the past)
res <- MCMC_full(I = incidence,
N_geo = N_geo,
iter = rep,
theta0 = theta0,
s = sigma_prop,
SI = SI,
mu0 = mu0,
repli_adapt = 10,
within_iter = rep/10)
res <- MCMC_full(I = incidence,
N_geo = N_geo,
iter = rep,
theta0 = theta0,
s = sigma_prop,
SI = SI,
mu0 = mu0,
repli_adapt = 10,
within_iter = rep/10)
incidence
I<-incidence[,-1]
a=I[,1]
a
matrix(a,3,lebgth(a))
matrix(a,3,length(a))
matrix(a,3,length(a),byrow = TRUE)
library(incidence)
library(projections)
library(epitrix)
library(EpiEstim)
library(Hmisc)
library(ebolaproj)
rm(list = as.vector(ls()))
# devtools::load_all('.')
library(ebolaproj)
# load sample data to check
load(file = 'simulated.RData')
dim(incidence)
set.seed(1)
incidence <- incidence[,1:2]
# number of locations
N_geo <- ncol(incidence)-1
# Serial interval
mean_SI <- 14.2
CV_SI <- 9.6/14.2 # from http://www.nejm.org/doi/suppl/10.1056/NEJMc1414992/suppl_file/nejmc1414992_
SI <- SI_gamma_dist_EpiEstim(mu = mean_SI,
cv = CV_SI,
SItrunc = 40)
# final number of MCMC iterations (the whole thing,
# here with 10 locations runs in ~3.5mins) )
rep <- 2e2
sigma_prop <- rep(0.1,N_geo*2)         # initial proposal variances (they are now tuned!)
# initial incidence conditions
if ( N_geo>1 ){
mu0 <- colMeans(incidence[,-1])*SI$SItrunc
}else{
mu0 <- mean(incidence[,-1])*SI$SItrunc
}
# initially, we assume R=1 and choose initial condition accordingly, i.e. with mu0 case and R=1
# we expect the number of daily cases to stabilised at the mean of the observed incidence in the
# time window of interest
# this is use for the prior of initial number of cases, i.e. as the mean of an exponential distribution
# in practice, the mu0 cases will happen 100 days before the start of the time windows
theta0 <- c(rep(1,N_geo), mu0)          # initial parameter R=1 (time # of locations, and initial number of cases in the past)
res <- MCMC_full(I = incidence,
N_geo = N_geo,
iter = rep,
theta0 = theta0,
s = sigma_prop,
SI = SI,
mu0 = mu0,
repli_adapt = 10,
within_iter = rep/10)
Acc <- colSums(diff(res$theta)!=0)/rep          # acceptance rate (should be close to .2)
Acc
# plot traces
plot(res$logL[,1])                                  # of likelihood
layout(matrix(1:N_geo,2,ceiling(N_geo/2),byrow = TRUE))
for (i in 1:N_geo) plot(res$theta[,i])              # of R's
for (i in 1:N_geo) plot(res$theta[,N_geo+i])        # of initial conditions
if (N_geo>1){
R_est <- apply(res$theta[,1:N_geo],2,
quantile,c(.5,.025,.975))   # median and 95%CrI of Rs by locations
I0_est <- apply(res$theta[,(N_geo+1):(2*N_geo)],2,
quantile,c(.5,.025,.975))   # median and 95%CrI of I0
}else{
R_est <- quantile(res$theta[,1],c(.5,.025,.975))
I0_est <- quantile(res$theta[,2],c(.5,.025,.975))
}
save.image('test_on_simulation1.RData')             # saving so far
start_time <- Sys.time()
I_pred <- Proj_Pois(Results = res ,
NR_samples = 10,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
end_time <- Sys.time()
end_time - start_time
apply(I_pred[,1,],2, quantile,c(.5,.0275,.975))
I_pred <- Proj_Pois_incl_trusted(Results = res ,
NR_samples = 10,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI, I= incidence[,-1])
Results = res
NR_samples = 10
Nsim_per_samples = 10
week_forward = 4+4
N_geo = N_geo
I_pred <- Proj_Pois_incl_trusted(Results = res ,
NR_samples = 10,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI, Iobs = incidence[,-1])
Iobs = incidence[,-1]
if (NR_samples>nrow(Results$theta)) warning('Nsim must be smaller than size of posterior samples')
Nsim <- NR_samples * Nsim_per_samples
I_predict <- array(data = 0, dim = c(Nsim,N_geo,7*week_forward+100+nrow(Iobs)))
nrow(Iobs)
setwd('ebolaproj')
devtools::document()
devtools::document()
devtools::document()
library(ebolaproj)
setwd('../')
library(incidence)
library(projections)
library(epitrix)
library(EpiEstim)
library(Hmisc)
library(ebolaproj)
rm(list = as.vector(ls()))
# devtools::load_all('.')
library(ebolaproj)
# load sample data to check
load(file = 'simulated.RData')
dim(incidence)
incidence <- incidence[,1:2]
set.seed(1)
# number of locations
N_geo <- ncol(incidence)-1
# Serial interval
mean_SI <- 14.2
CV_SI <- 9.6/14.2 # from http://www.nejm.org/doi/suppl/10.1056/NEJMc1414992/suppl_file/nejmc1414992_
SI <- SI_gamma_dist_EpiEstim(mu = mean_SI,
cv = CV_SI,
SItrunc = 40)
# final number of MCMC iterations (the whole thing,
# here with 10 locations runs in ~3.5mins) )
rep <- 2e2
sigma_prop <- rep(0.1,N_geo*2)         # initial proposal variances (they are now tuned!)
# initial incidence conditions
if ( N_geo>1 ){
mu0 <- colMeans(incidence[,-1])*SI$SItrunc
}else{
mu0 <- mean(incidence[,-1])*SI$SItrunc
}
# initially, we assume R=1 and choose initial condition accordingly, i.e. with mu0 case and R=1
# we expect the number of daily cases to stabilised at the mean of the observed incidence in the
# time window of interest
# this is use for the prior of initial number of cases, i.e. as the mean of an exponential distribution
# in practice, the mu0 cases will happen 100 days before the start of the time windows
theta0 <- c(rep(1,N_geo), mu0)          # initial parameter R=1 (time # of locations, and initial number of cases in the past)
res <- MCMC_full(I = incidence,
N_geo = N_geo,
iter = rep,
theta0 = theta0,
s = sigma_prop,
SI = SI,
mu0 = mu0,
repli_adapt = 10,
within_iter = rep/10)
start_time <- Sys.time()
I_pred <- Proj_Pois(Results = res ,
NR_samples = 10,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
end_time <- Sys.time()
end_time - start_time
I_pred <- Proj_Pois_incl_trusted(Results = res ,
NR_samples = 10,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI, Iobs = incidence[,-1])
I_pred <- Proj_Pois_incl_trusted(Results = res ,
NR_samples = 10,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI, I_obs = incidence[,-1])
I_pred <- Proj_Pois_incl_trusted(Results = res ,
NR_samples = 10,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI, Iobs = incidence[,-1])
setwd('ebolaproj')
devtools::document()
library(ebolaproj)
setwd('../')
load('test_on_simulation1.RData')
I_pred <- Proj_Pois(Results = res ,
NR_samples = 10,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
apply(I_pred[,1,],2, quantile,c(.5,.0275,.975))
I_pred <- Proj_Pois_incl_trusted(Results = res ,
NR_samples = 10,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI, Iobs = incidence[,-1])
setwd('ebolaproj')
devtools::document()
library(ebolaproj)
setwd(../)
setwd('../')
load('test_on_simulation1.RData')
I_pred <- Proj_Pois(Results = res ,
NR_samples = 10,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI)
apply(I_pred[,1,],2, quantile,c(.5,.0275,.975))
I_pred <- Proj_Pois_incl_trusted(Results = res ,
NR_samples = 10,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,
SI = SI, Iobs = incidence[,-1])
apply(I_pred[,1,],2, quantile,c(.5,.0275,.975))
I_pred <- Proj_NegBin_incl_trusted(Results = res ,
NR_samples = 10,
Nsim_per_samples = 10,
week_forward = 4+4,
N_geo = N_geo,Overdispersion = 0.03,
SI = SI, I= incidence[,-1])
apply(I_pred[,1,],2, quantile,c(.5,.0275,.975))
devtools::load_all(".")
library(ebolaproj)
library(ebolaproj)
library(ebolaproj)
document()
library(roxygen2)
document()
document('.')
document()
document('.')
library(devtools)
document('.')
library(ebolaproj)
detach("package:devtools", unload=TRUE)
library("ebolaproj", lib.loc="C:/Users/pn211/Documents/R")
